// tslint:disable
/**
 * fit-shopify-data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    OrderInput,
    OrderOutput,
    ProductInput,
    ProductOutput,
} from '../models';

export interface CreateOrderRequest {
    fitToken: string;
    orderInput?: OrderInput;
}

export interface CreateProductRequest {
    fitToken: string;
    productInput?: ProductInput;
}

export interface UpdateOrderRequest {
    fitToken: string;
    orderInput?: OrderInput;
}

export interface UpdateProductRequest {
    fitToken: string;
    productInput?: ProductInput;
}

/**
 * no description
 */
export class WebhookControllerApi extends BaseAPI {

    /**
     */
    createOrder({ fitToken, orderInput }: CreateOrderRequest): Observable<OrderOutput>
    createOrder({ fitToken, orderInput }: CreateOrderRequest, opts?: OperationOpts): Observable<AjaxResponse<OrderOutput>>
    createOrder({ fitToken, orderInput }: CreateOrderRequest, opts?: OperationOpts): Observable<OrderOutput | AjaxResponse<OrderOutput>> {
        throwIfNullOrUndefined(fitToken, 'fitToken', 'createOrder');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'fit-token': fitToken,
        };

        return this.request<OrderOutput>({
            url: '/webhook/order-created',
            method: 'POST',
            headers,
            query,
            body: orderInput,
        }, opts?.responseOpts);
    };

    /**
     */
    createProduct({ fitToken, productInput }: CreateProductRequest): Observable<ProductOutput>
    createProduct({ fitToken, productInput }: CreateProductRequest, opts?: OperationOpts): Observable<AjaxResponse<ProductOutput>>
    createProduct({ fitToken, productInput }: CreateProductRequest, opts?: OperationOpts): Observable<ProductOutput | AjaxResponse<ProductOutput>> {
        throwIfNullOrUndefined(fitToken, 'fitToken', 'createProduct');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'fit-token': fitToken,
        };

        return this.request<ProductOutput>({
            url: '/webhook/product-created',
            method: 'POST',
            headers,
            query,
            body: productInput,
        }, opts?.responseOpts);
    };

    /**
     */
    updateOrder({ fitToken, orderInput }: UpdateOrderRequest): Observable<OrderOutput>
    updateOrder({ fitToken, orderInput }: UpdateOrderRequest, opts?: OperationOpts): Observable<AjaxResponse<OrderOutput>>
    updateOrder({ fitToken, orderInput }: UpdateOrderRequest, opts?: OperationOpts): Observable<OrderOutput | AjaxResponse<OrderOutput>> {
        throwIfNullOrUndefined(fitToken, 'fitToken', 'updateOrder');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'fit-token': fitToken,
        };

        return this.request<OrderOutput>({
            url: '/webhook/order-updated',
            method: 'POST',
            headers,
            query,
            body: orderInput,
        }, opts?.responseOpts);
    };

    /**
     */
    updateProduct({ fitToken, productInput }: UpdateProductRequest): Observable<ProductOutput>
    updateProduct({ fitToken, productInput }: UpdateProductRequest, opts?: OperationOpts): Observable<AjaxResponse<ProductOutput>>
    updateProduct({ fitToken, productInput }: UpdateProductRequest, opts?: OperationOpts): Observable<ProductOutput | AjaxResponse<ProductOutput>> {
        throwIfNullOrUndefined(fitToken, 'fitToken', 'updateProduct');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'fit-token': fitToken,
        };

        return this.request<ProductOutput>({
            url: '/webhook/product-updated',
            method: 'POST',
            headers,
            query,
            body: productInput,
        }, opts?.responseOpts);
    };

}

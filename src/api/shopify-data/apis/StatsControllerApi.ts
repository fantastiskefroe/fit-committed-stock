// tslint:disable
/**
 * fit-shopify-data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    GroupByUnitInput,
    StatsOutput,
} from '../models';

export interface GetStatsRequest {
    from: string;
    to: string;
    xFitToken?: string | null;
}

export interface GetStatsGroupedRequest {
    from: string;
    to: string;
    unit: GroupByUnitInput;
    xFitToken?: string | null;
}

/**
 * no description
 */
export class StatsControllerApi extends BaseAPI {

    /**
     */
    getStats({ from, to, xFitToken }: GetStatsRequest): Observable<StatsOutput>
    getStats({ from, to, xFitToken }: GetStatsRequest, opts?: OperationOpts): Observable<AjaxResponse<StatsOutput>>
    getStats({ from, to, xFitToken }: GetStatsRequest, opts?: OperationOpts): Observable<StatsOutput | AjaxResponse<StatsOutput>> {
        throwIfNullOrUndefined(from, 'from', 'getStats');
        throwIfNullOrUndefined(to, 'to', 'getStats');

        const headers: HttpHeaders = {
            ...(xFitToken != null ? { 'x-fit-token': String(xFitToken) } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'from': (from as any).toISOString(),
            'to': (to as any).toISOString(),
        };

        return this.request<StatsOutput>({
            url: '/stats',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    getStatsGrouped({ from, to, unit, xFitToken }: GetStatsGroupedRequest): Observable<Array<StatsOutput>>
    getStatsGrouped({ from, to, unit, xFitToken }: GetStatsGroupedRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<StatsOutput>>>
    getStatsGrouped({ from, to, unit, xFitToken }: GetStatsGroupedRequest, opts?: OperationOpts): Observable<Array<StatsOutput> | AjaxResponse<Array<StatsOutput>>> {
        throwIfNullOrUndefined(from, 'from', 'getStatsGrouped');
        throwIfNullOrUndefined(to, 'to', 'getStatsGrouped');
        throwIfNullOrUndefined(unit, 'unit', 'getStatsGrouped');

        const headers: HttpHeaders = {
            ...(xFitToken != null ? { 'x-fit-token': String(xFitToken) } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'from': (from as any).toISOString(),
            'to': (to as any).toISOString(),
            'unit': unit,
        };

        return this.request<Array<StatsOutput>>({
            url: '/stats/grouped',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
